" Author: Kyle Huang (https://github.com/kal444)
"
" Based on many others' vimrc files
"   many years ago, the initial version is http://www.guckes.net/vim/
"   then, it went through many modifications
"   recently, I'm inspired to look at more vim plugins and started to go
"   through this: https://github.com/square/maximum-awesome
"   some more 'sensible' settings from https://github.com/tpope/vim-sensible

" vimrc location can vary based on OSes
" see :version
" http://vim.wikia.com/wiki/Open_vimrc_file#Location_of_vimrc
"========== save vimrc location for later use
if has("win32") || has("win64")
  let vimrc='$HOME\_vimrc'
else
  let vimrc='$HOME/.vimrc'
endif

"========== configure Vundle
" This expects Vundle is already cloned into bundles directory
filetype off
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" Vundle bundles
if filereadable(expand("~/.vim/vimrc.bundles"))
  source ~/.vim/vimrc.bundles
  source ~/.vim/vimrc.bundles.local
endif
call vundle#end()
filetype plugin indent on " enable file type detection.

" ========== Turn on syntax highlighting
if has('syntax') && !exists('g:syntax_on')
  syntax enable
endif

"========== Settings
set nocompatible " we want VIM not VI!

"========== File/buffer handling
set autoread " read the file again when it's changed outside vim and not inside vim
set autowrite " write file when :next, :rewind, :last, :first, :previous, :stop, :suspend, :tag, :!, :make commands are used
set nobackup " backups are for wimps  ;-)
set backupcopy=yes " see :help crontab
set encoding=utf-8
set hidden " keep the changed buffer without saving it
set writebackup " make a backup before overwriting a file. then remove it after the file was successfully written

"========== Tabs and spaces
set autoindent " copy indent from current line when starting a new line
set expandtab " use only spaces instead of tabs
set shiftwidth=2 " number of spaces to use for each step of (auto)indent
set smarttab " smart handling of tab at the front of the line vs in the line
set softtabstop=2 " number of spaces to use for each <Tab> or <BS> in editing
set tabstop=8 " real tabs are 8 spaces

"========== Folding
set foldenable " folding is good
set foldmethod=indent " make folding indent sensitive
set foldlevel=10 " don't start folding too early

"========== Display
set cursorline " makes cursor easier to find
set nocursorcolumn " don't make cursor TOO easy to find - too distracting
set display+=lastline " display last line as much as possible
set laststatus=2 " always show status line
set lazyredraw " don't update screen while executing macros, registers and other commands that have not been typed
set list " show trailing whitespace
set listchars=tab:▸\ ,trail:▫ " set nicer chars for tabs and trailing spaces
set nomodeline " don't use modelines
set number " do show line numbers
set report=0 " report all changed lines
set ruler " show cursor position always
set scrolloff=1 " show 1 row context above/below cursorline
set sidescrolloff=5 " show 5 columns as context
set shortmess+=atI " abbreviate all messages
set showcmd " show current uncompleted command
set showmatch " show matching bracket briefly
set showmode " show the current mode
"my status line
set statusline=%F%m%r%h%w\ [FORMAT=%{&ff}]\ [TYPE=%Y]\ [%p%%][POS=%l,%v][LINES=%L]
"show syntastic error in status line
set statusline+=%#warningmsg#%{SyntasticStatuslineFlag()}%*
set tabpagemax=50 " limit tabs opened
set title " have vim try to update the title of the window
set ttimeout ttimeoutlen=100 " timeout keycode after 100ms, do not timeout mappings
set ttyfast " we are on a fast connection
set wildchar=<Tab> " use tab to start wildcard expansion in the command-line
set wildignore=log/**,node_modules/**,target/**,tmp/**,*.rbc " ignore some files/directories for completion
set wildmenu " show a navigable menu for tab completion
set wildmode=longest,list,full " longest match, and list if can't match only one

set noerrorbells " disable error bell beep
set visualbell " use visual bell, but we will disable it later
set t_vb= " disable visualbell terminal chars

"========== Editting
set backspace=indent,eol,start " this is much smarter. back over autoindent,<EOL> and insert position
set clipboard=unnamed " yank and paste with the system clipboard
set esckeys " allow cursor movement in insert mode
set formatoptions+=2j " better indenting. join comment lines better
set nrformats-=octal " octal would cause numbers with leading zero to be treated as octal. Not good with ^A and ^X
set virtualedit=all " allow cursor movement anywhere
set whichwrap+=<,>,[,] " allow left, right keys to wrap in normal/visual mode

"========== History and Searching
set history=1000 " keep 1000 commands and 1000 search patterns in the history.
set hlsearch " highlight searches
set incsearch " display the match for a search pattern when halfway typing it
set ignorecase " do ignore case in search patterns. This works well with smartcase set on
set smartcase " ignore case when the pattern contains lowercase letters only

"========== Enable basic mouse behavior such as resizing buffers.
set mouse=a
if exists('$TMUX')  " Support resizing in tmux
  set ttymouse=xterm2
endif

"========== Fix Cursor in tmux
if exists('$TMUX')
  let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
  let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"
else
  let &t_SI = "\<Esc>]50;CursorShape=1\x7"
  let &t_EI = "\<Esc>]50;CursorShape=0\x7"
endif

"========== Plugin settings
let g:gitgutter_enabled = 1 " do enable git gutter

let g:ctrlp_match_window = 'order:ttb,max:15' " change CtrlP search result order and size
" Use The Silver Searcher https://github.com/ggreer/the_silver_searcher
if executable('ag')
  " Use Ag over Grep
  set grepprg=ag\ --nogroup\ --nocolor
  " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
  let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'
endif

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0

" set extensions for markdown files
autocmd BufNewFile,BufRead *.markdown,*.mkd,*.md set filetype=markdown
" markdown files should have spell checking
autocmd BufNewFile,BufRead *.markdown,*.mkd,*.md set spell
" restore last edit position if we can
autocmd BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$") | exe "normal! g`\"" | endif
" automatically rebalance windows on vim resize
autocmd VimResized * :wincmd =

"========== Key mappings
let mapleader = ','

nnoremap <leader>hl :let @/ = ""<CR> " clear hlsearch highlights
nnoremap <leader>rcm :%s/<c-v><c-m>//g<cr> " rcm = remove ^M from DOS file
nnoremap <leader>v :exe ":edit " . vimrc<CR> " vimrc editing (edit this file)
nnoremap <leader>V :exe ":source " . vimrc<CR> " update by reading this file

vnoremap p "_dP " p i visual mode yank into blackhole register before pasting
vnoremap <leader>cel :g/^[<c-i> ]*$/d<cr> " cel = clear empty lines - deletes all empty or whitespace only lines

inoremap jj <ESC> " jj quickly in insertmode gives escape key
inoremap <C-U> <C-G>u<C-U> " insert mode ^U will clear line, but undo buffer now saves the cleared text.

" rewrite the file with sudo
cnoremap w!! w !sudo tee > /dev/null %

" window movements
noremap <C-h> <C-w>h
noremap <C-j> <C-w>j
noremap <C-k> <C-w>k
noremap <C-l> <C-w>l
noremap <c-w><c-e> <c-w><c-w><c-w>_<cr> " switch to the other window ala ^w^w, but maximize the target window too

" plugin keys
nnoremap <leader><space> :call whitespace#strip_trailing()<CR>
nnoremap <leader>a :Ag<space>
nnoremap <leader>b :CtrlPBuffer<CR>
nnoremap <leader>d :NERDTreeToggle<CR>
nnoremap <leader>f :NERDTreeFind<CR>
nnoremap <leader>g :GitGutterToggle<CR>
nnoremap <leader>l :Tabularize<space>/
vnoremap <leader>l :Tabularize<space>/
nnoremap <leader>t :CtrlP<CR>
nnoremap <leader>T :CtrlPClearCache<CR>:CtrlP<CR>
nnoremap <leader>] :TagbarToggle<CR>

if has("gui_running")
  set columns=132 " default to 132 columns
  set lines=50 " default to 50 lines

  set background=dark " use the dark bg color set
  set guicursor=a:blinkon0 " diable blinky cursor
  set mousehide " hide the mouse when typing

  " at some point the fonts will be needed
  " if has("win32") || has("win64")
  "   set guifont=DejaVu_Sans_Mono:h10:cANSI
  " else
  "   set guifont=DejaVu\ Sans\ Mono\ 10
  " endif
endif

if has('gui_running') || &t_Co == 256
  colorscheme solarized
endif

" Load matchit.vim, but only if the user hasn't installed a newer version.
if !exists('g:loaded_matchit') && findfile('plugin/matchit.vim', &rtp) ==# ''
  runtime! macros/matchit.vim
endif

if filereadable(expand("~/.vim/vimrc.local"))
  source ~/.vim/vimrc.local
endif
